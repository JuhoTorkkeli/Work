Class ZenApp1.App1 Extends (%Persistent, %XML.Adaptor) [ Inheritance = left ]
{

/* PƒƒSIVUN ALAINEN OHJELMALUOKKA JOKA TOIMII MY÷S SELLAISENAAN */
Property DateAndTime As %TimeStamp [ Required ];

Property EventType As %String;

Property Computer As %String;

Property SourceName As %String;

Property EventId As %Integer;

Property Message As %Text(MAXLEN = 5000);

/*Ajetaan terminaalissa syntaksilla: do class##(ZenApp1.App1).lueTiedosto()*/

/*Ohjelma avaa kaikki HTML-tiedostot m‰‰ritetyst‰ hakemistopolusta ohjelman alussa (set directory = hakemistopolku), lukee jokaisesta 'New W3SVC Messages in System Event Log' -tiedostosta m‰‰ritellyt rivit, muokkaa ne (Propertyt m‰‰ritelty ylemp‰n‰) ja tallentaa ne tietokantaan objekteina. Lis‰ksi nime‰‰ luetut HTML-tiedostot uudelleen (laittaa per‰‰n (OK) samassa hakemistopolussa).*/

/*Ohjelma ei vertaa (OK)-tiedostoja uusien tiedostojen kanssa seuraavalla kerralla, kun ohjelmaa ajetaan (k‰ytt‰j‰ tarkkana ettei hakemistopolkuun vied‰ samaa tiedostoa toiseen kertaan!!!). K‰ytt‰j‰n pit‰‰ myˆskin tarkistaa error-kansioon viedyt tiedostot itse (pist‰‰ errorLog:iin talteen tiedot). Tallentaa objekteja tietokantaan tiedostoista niin kauan, kunnes ohjelma havaitsee virheen (laittaa errorLog:iin rivit, joissa virhe tapahtui)*/

/*errorLog:iin tallennettujen rivien avulla Notepad++ -ohjelmalla paikannetaan virhe*/

/*K‰ytt‰j‰ voi p‰‰tt‰‰ milt‰ rivilt‰ l‰htien ohjelma l‰htee tallentamaan tiedostosta objekteja tietokantaan saveFromLine parametrin avulla (arvo tallennettu errorLog:iin) tiedoston manuaalisen korjauksen j‰lkeen.*/

/*saveFromLine = objektirivi, jolta l‰hdet‰‰n tallentamaan objekteja tietokantaan (ohjelma nollaa saveFromLine arvon ensimm‰isen tiedoston luvun j‰lkeen)*/
ClassMethod lueTiedosto(saveFromLine = 0) As %Boolean
{
	set directory = "C:\Users\TT\Desktop\Juho\App1Testi"

	set (objectNumber, objectLine, error, oRivi, i) = 0 
	;Alustetaan 'objectNumber', jonka avulla katsotaan kuinka monta objektia tallennettiin tietokantaan jokaisesta tiedostosta erikseen.
	;Alustetaan 'objectLine', jota k‰ytet‰‰n aliohjelmassa 'createObject' objektinluonnissa.
	;Alustetaan 'error', jota k‰ytet‰‰n jos HTML-tiedostoja ei lˆydy hakemistopolusta tai objektintallennus-error tilanteissa ehtona ohjelman lopetukselle.
	;Alustetaan 'oRivi', jota k‰ytet‰‰n laskettaessa 'saveFromLine' kanssa montako objektia j‰tet‰‰n v‰list‰ tallennettaessa objekteja tietokantaan.
	;Alustetaan 'i', jota k‰ytet‰‰n ensimm‰iseksi aliohjelmassa 'showFiles'.
	
	do showFiles(directory) ;Aliohjelmaan 'showFiles' vied‰‰n p‰‰ohjelman alussa m‰‰ritelty hakemistopolku, jossa taulukkoon tallennetaan kaikki HTML-tiedostot.
	if (error = 1) {write "Yht‰‰n avattavaa HTML-tiedostoa ei lˆytynyt hakemistopolusta: ", !, directory, ! quit 0}
	
	set i = 1 ;Alustetaan 'i' jota k‰ytet‰‰n uudestaan seuraavassa aliohjelmassa 'compareFiles'.
	for {
		set cf = $$compareFiles() ;Verrataan HTML-tiedostoja toisiinsa ettei kahta t‰ysin samanlaista ole vahingossa eksynyt hakemistopolkuun.
		if (cf = 0){ ;Jos tiedosto ei ole samanlainen mink‰‰n muun avattavan tiedoston kanssa..
			set file = ##class(%File).%New(fileNamePaths(i)) ;..L‰hdet‰‰n avaamaan tiedostoja taulukosta 'fileNamePaths(i)'.
			do file.Open("R",2)
			if 'file.IsOpen {write !, "Tiedosto: ", !, fileNamePaths(i), !, "ei auennut!" quit} ;Jos tiedosto ei aukea siirryt‰‰n seuraavaan tiedostoon. N‰iden tiedostojen per‰‰n ei tule (OK), niit‰ ei siirret‰ error-kansioon ja ne ajetaan uudelleen seuraavalla kerralla.
			
			do readFile(file) ;Vied‰‰n tiedosto luettavaksi aliohjelmaan 'readFile'.
			if (error = 0){ ;Jos tiedostossa ei ollut mink‰‰nlaista virhett‰..
				write !, objectNumber, " Objektia luotiin tietokantaan tiedostosta: ", !, fileNamePaths(i)
				set className = "write ^" _ $ClassName() _ "D" ;'className' -muuttujaan ylˆs globaalin nimi.
				write !, "Objekteja tietokannassa yhteens‰: " Xecute className ;Xecute-komennolla ajetaan 'className' -muuttujassa oleva rivi.
				set objectNumber = 0 ;Nollataan 'objectNumber', jotta seuraavan tiedoston objektien lukum‰‰r‰ saadaan erilleen.
				write !, viiva
				do file.Close() ;Tiedosto pit‰‰ sulkea, jos sen haluaa nimet‰ uudelleen. (Muuten heitt‰‰ ERROR #00)
				set newFileName = $$renameFileName(fileNamePaths(i)) ;Haetaan tiedostolle uusi nimi, kun siit‰ on tallennettu tiedot tietokantaan.
				do renameFile(fileNamePaths(i), newFileName) ;Vied‰‰n tiedosto uudelleennimett‰v‰ksi renameFile:en.
			}
			else { ;Jos avatussa tiedostossa oli virhe..
				do file.Close() ;Suljetaan tiedosto ennen sen siirt‰mist‰ error-kansioon.
				do moveFileToError(fileNamePaths(i), fileNames(i)) ; Siirret‰‰n virheellinen tiedosto error-kansioon.
				do createErrorLog(fileNames(i)) ;Kirjataan tiedot errorLog:iin.
				write !!, objectNumber, " Objektia luotiin tietokantaan tiedostosta: ", !, fileNamePaths(i)
				write !, viiva
				set (objectLine, error, objectNumber) = 0 
				;Nollataan objectLine, jos jossain virheellisess‰ tiedostossa on ollut puuttuva m‰‰r‰ tarvittavia rivej‰.
				;Nollataan error tilanne ennen kuin toista tiedostoa l‰hdet‰‰n avaamaan.
				;Nollataan objectNumber, jotta saamme seuraavan tiedoston objektien lukum‰‰r‰n erilleen.
				do pressToContinue()
				write !, viiva
			}
		}	
		set i = i + 1
		set saveFromLine = 0
		quit:($get(fileNamePaths(i)) = "") ;Lopetetaan ohjelma jos HTML-tiedostoja ei ole en‰‰ j‰ljell‰ luettavaksi.
	}
	write !
	quit 1
	
showFiles(dir) ;Tallennetaan kaikki HTML-tiedostot m‰‰ritetyst‰ hakemistopolusta kahteen eri taulukkoon 'fileNames' ja 'fileNamePaths'.
	set rs = ##class(%ResultSet).%New("%Library.File:FileSet") ;Otetaan k‰sittelyyn kaikki tiedostot (Windowsissa?).
	do rs.Execute(dir, "*", "Type") ;Ajetaan hakemistopolusta "dir = alussa m‰‰ritelty hakemistopolku" kaikki tiedot "* = all" j‰rjestyksess‰ "Type = tiedostop‰‰te" mukaan.
	write "Avatut HTML-tiedostot: "
	
	while rs.Next(){ ;Niin kauan kuin tiedostoja lˆytyy hakemistopolusta, ne k‰yd‰‰n l‰vitse ja HTML-tiedostojen nimet otetaan ylˆs.
		set fileNamePath = rs.GetData(1) ;N‰ytt‰‰ koko hakemistopolun.
		set fileName = rs.GetData(6) ;N‰ytt‰‰ vain tiedostonimen.
		if '(fileName?.e1"(OK)"1"."1"html"){ ;Ei lueta mukaan jo luettuja tiedostoja (OK).
			if (fileNamePath?.e1"."1"html"){ ;Jos halutaan lukea muita kuin HTML-loppuisia tiedostoja t‰st‰ voidaan vaihtaa p‰‰te tarkastamaan muunlaisia.
				set i = $increment(i)
				write !, fileNamePath
				set fileNamePaths(i) = fileNamePath ;Tallennetaan ensimm‰iseen taulukkoon tiedostojen hakemistopolut..
				set fileNames(i) = fileName ;..ja toiseen taulukkoon pelk‰t tiedostonimet.
			}
			else{
				if (fileName?.e1".".e){ ;Kaikki muunlaiset tiedostot siirret‰‰n error-kansioon.
				do moveFileToError(fileNamePath, fileName)
				write !, "Tiedosto: '" , fileName, "' siirrettiin error-kansioon!"
				do pressToContinue()
				}
			}
		}
	}
	if $get(fileNamePaths(i)) = "" { ;Jos ensimm‰ist‰k‰‰n HTML-tiedostoa ei lˆytynyt, ohjelma palauttaa virheen ja se loppuu p‰‰ohjelmassa.
		do rs.Close()
		set error = 1
		quit
	}
	do viiva()
	write !, viiva
	do rs.Close()
	quit
	
moveFileToError(errorFile, newFileLocation) ;V‰‰r‰nlaiset ja virheelliset HTML-tiedostot vied‰‰n error-kansioon. Jos error-kansiota ei ole olemassa, se luodaan.
	if $extract(directory, $length(directory)) '= "\" {set errorDir = directory _ "\Error"}
	else {set errorDir = directory _ "Error"}
	if '##class(%File).DirectoryExists(errorDir){
		set sc = ##class(%File).CreateNewDir(directory, "Error")
		if $$$ISERR(sc) {
			do $System.Status.DisplayError(sc)
			write !, "Kansiota: " _ errorDir _" ei voitu luoda!", !
			}
	}
	set newErrorFile = errorDir _ "\" _ newFileLocation
	set fileToMove = ##class(%File).Rename(errorFile, newErrorFile) ;Siirret‰‰n v‰‰r‰/virheellinen tiedosto error-kansioon.
	quit
	
viiva()	;Tehd‰‰n viiva terminaaliin viimeisimm‰n hakemistopolun pituuden mukaan (hahmotusta varten).
	set pituus = $length(fileNamePaths(i))
	set viiva = "-"
	for i = 1:1:pituus {set viiva = viiva _ "-"}
	if ($length(viiva) > 80){set viiva = $extract(viiva, 1, 80)}
	quit
	
compareFiles() ;Verrataan avattuja HTML-tiedostoja toisiinsa tehdyss‰ taulukossa fileNamePaths, ettei t‰ss‰ vaiheessa hakemistopolkuun ole eksynyt kahta samanlaista tiedostoa.
	set cf = 0
	for j = 1:1 {
		if $data(fileNamePaths(i+j)){
			set cf = ##class(%File).Compare(fileNamePaths(i), fileNamePaths(i+j)) ;Verrataan taulukon ensimm‰ist‰ tiedostoa muihin. Jo verrattuja ei n‰in tarvitse alkaa uudelleen vertaamaan seuraavien avattavien tiedostojen kanssa.
			if (cf = 1){
				write !, "Tiedosto: ", !, fileNamePaths(i), !, "on identtinen tiedoston: ",!, fileNamePaths(i+j), " kanssa!"
				do moveFileToError(fileNamePaths(i), fileNames(i))
				write !, viiva
				do pressToContinue()
				write !, viiva
				quit 
			}
		}
		quit:($data(fileNamePaths(i+j)) = 0) ;Jos seuraavaa tiedostoa ei en‰‰ lˆydy verrattavaksi t‰m‰ aliohjelma p‰‰ttyy.
	}
	quit cf ;Palautetaan arvo takaisin p‰‰ohjelmaan. Jos ensimm‰inen tiedosto on t‰ysin samanlainen jonkun muun kanssa, vasta viimeisin samanlainen tiedosto luetaan tietokantaan (koska viimeist‰ tiedostoa ei tulla vertaamaan samanlaisiin).
	
pressToContinue() ;T‰t‰ aliohjelmaa k‰ytet‰‰n vain k‰ytt‰j‰n havainnollistamisen parantamiseksi error-tilanteissa.
	read !, ">>>Press any key to continue<<<", y#1:3
	quit
	
readFile(file) ;Luetaan tiedosto rivi rivilt‰ viimeiseen riviin asti.
	while 'file.AtEnd { ;Kunnes viimeinen tiedoston rivi on luettu..
		set line = file.ReadLine() ;Otetaan talteen jokainen rivi erikseen..
		set eRivi = $increment(eRivi) ;Otetaan talteen rivien kokonaislukum‰‰r‰ eRivi:in.
		if (line?.E1"<TD><tt>".E1"</tt></TD>"){ ;Jos rivi on halutunlainen sen alussa saa olla tyhj‰‰ ja mit‰ tahansa tietoa tagien v‰liss‰.
			set objectLine = $increment(objectLine)
			set oLine(objectLine) = line ;oLine:en tallennetaan alkuper‰iset rivit.
			set line = $$editLine(line) ;Vied‰‰n muokattavaksi tulevat objektiksi tallennettavat rivit editLine:een.
			do createObject(line) ;Vied‰‰n objektin osat yksi kerrallaan createObject:iin.
		}
		if (error = 1){quit} ;Jos createObject palauttaa virheen tiedoston luku loppuu ja p‰‰ohjelmassa siirryt‰‰n seuraavaan tiedostoon.
	}
	if (objectLine > 0) && (objectLine < 6){
		set error = 1 set errorText = "Puuttuu rivej‰!" write !, "ERROR: objectLine < 6; tiedostossa: ", !, fileNamePaths(i), !, "ei ole tarvittavia rivej‰, jotka vaaditaan tallennettavaksi tietokantaan!"
		}
	quit

editLine(line) ;Muokataan lause ja vied‰‰n se createObject:iin.
	set line = $piece($piece(line,">",3),"<",1) ;Otetaan pois tagit yms.
	if (line?1.2N1"."1.2N1"."2.4N1" "1.2N1":"1.2N1":"1.2N){ ;Jos kyseess‰ on aika..
		set line = $replace(line, ".", "/")
		set line = $ZDATETIME($ZDATETIMEH(line, 4), 3) ;..muunnetaan se timestamp formaattiin.
	}
	quit line

createObject(line) ;Luodaan objekti 6:sta rivist‰ (oletetaan rivien olevan t‰ss‰ j‰rjestyksess‰): DateAndTime (Time reserved word sql), EventType, Computer, SourceName, EventId ja Message.
	if (objectLine = 1){set App1Oref=##class(ZenApp1.App1).%New() 
						set App1Oref.DateAndTime=line}
	if (objectLine = 2){set App1Oref.EventType=line}
	if (objectLine = 3){set App1Oref.Computer=line}
	if (objectLine = 4){set App1Oref.SourceName=line}
	if (objectLine = 5){set App1Oref.EventId=line}
	if (objectLine = 6){set App1Oref.Message=line
						if (oRivi = saveFromLine){ ;Jos k‰ytt‰j‰ on antanut saveFromLine:en arvon alkaa objektien tallennus vasta oRivi:n saavutettua kyseisen arvon.
							set Save=App1Oref.%Save() ;Kun tarpeeksi rivej‰ on tuotu tallennetaan se objektina tietokantaan.
							if '$$$ISERR(Save){
								set objectNumber = $increment(objectNumber)
							}
							else {
								do $System.Status.DisplayError(Save)
								write !
								set errorText = $System.Status.GetErrorText(Save)
								set error = 1
							}
						}
						else {
							set oRivi = $increment(oRivi)
							}
						set counter = objectLine ;counter ottaa talteen jokaisen objektin tallennuksen yhteydess‰ rivien m‰‰r‰n (ei tiedoston rivien kokonaism‰‰r‰‰), jotka kirjoitetaan errorLogiin.
						set objectLine = 0
	}
	quit
	
createErrorLog(fns) ;Kirjoittaa moveFileToError -aliohjelmassa luotuun errorLogiin kaikissa ajetuissa tiedostoissa tapahtuneet virhetilanteet.
	set fc = ##class(%Stream.FileCharacter).%New()
	set fc.Filename = errorDir _ "\errorLog.txt"
	do fc.MoveToEnd()
	do fc.WriteLine("Aika: " _ $zdatetime($h, 3))
	do fc.WriteLine("File: " _ fns)
	do fc.WriteLine("Virhe: " _ errorText)
	do fc.WriteLine("Rivit: " _ (eRivi - 5) _ " - " _ eRivi) ;Laitetaan ylˆs errorLogiin rivit, joissa virhe tapahtui (Jos rivej‰ tallentuu v‰‰r‰ m‰‰r‰ arvo saattaa heitt‰‰ errorLogissa)
	for k = 1:1:counter {do fc.WriteLine(oLine(k))} ;Lis‰t‰‰n errorLogiin rivit, joissa virhe tapahtui.
	do fc.WriteLine("SaveFromLine: " _ objectNumber) ;Lis‰t‰‰n saveFromLine arvo loppuun, jonka avulla k‰ytt‰j‰ voi ajaa ensimm‰isen tiedoston halutulta objektirivilt‰ manuaalisen korjauksen j‰lkeen.
	do fc.WriteLine(viiva)
	do fc.%Save()
	write !, "errorLog luotiin/p‰ivitettiin kansioon: ", !
	write errorDir _ "\errorLog.txt"
	quit
	
renameFileName(fileName) ;Tiedoston per‰‰n lis‰t‰‰n "(OK)" kun siit‰ on tallennettu tiedot tietokantaan.
	set fileNamePiece1 = $piece(fileName, ".", 1)
	set fileNamePiece2 = $piece(fileName, ".", 2)
	set newFileName = fileNamePiece1 _ "(OK)" _ "." _ fileNamePiece2
	quit newFileName ;Palautetaan uusi tiedostonimi, joka vied‰‰n renameFile:en p‰‰ohjelmassa.
	
renameFile(oFileName, newFileName) ;Tiedosto nimet‰‰n uudelleen, jotta sit‰ ei seuraavalla kerralla (kun ohjelmaa ajetaan) luettaisi uudelleen.
	set renamedFile = ##class(%File).Rename(oFileName, newFileName) ;Samalla metodilla "Rename" tiedosto voidaan myˆs siirt‰‰ muualle.
	if $$$ISERR(renamedFile){
		do $System.Status.DisplayError(renamedFile)
		write !, "Tiedostoa: ", !, oFileName, !, "ei voitu nimet‰ uudelleen tiedostoksi: "
		write !, newFileName, !, viiva
		do pressToContinue()
	}
	quit
}

/*deleteGlobalData ajetaan erikseen ZenApp1.HomePage:sta, jos tiedot halutaan poistaa tietokannasta (ei poista itse globaalia).*/

/*procedureBlock = 1, jotta voidaan palauttaa arvot(killCount, count) takaisin ZenApp1.HomePage.deleteGlobalData:an*/
ClassMethod deleteGlobalData(killCount As %Integer = 0, count As %Integer = 0) [ ProcedureBlock = 1 ]
{
	if ($data(^ZenApp1.App1D)) = 11 { ;Katsotaan lˆytyykˆ poistettavia tietoja tietokannasta.
		set x = $order(^ZenApp1.App1D(""), -1) ;Poistetaan loppup‰‰st‰ -1.
		while (x '= ""){ ;Niin kauan kuin poistettavia lˆytyy...
			kill ^ZenApp1.App1D(x) ;Poistetaan ne...
			set killCount = $increment(killCount) ;...ja lis‰t‰‰n 1 killCount.			
			set x = $order(^ZenApp1.App1D(x), -1)
		}
		set y = $order(^ZenApp1.App1D("")) ;Alustetaan y, jolla katsotaan lˆytyykˆ subscriptej‰ globaalista.
		while (y '= "") { ;Niin kauan kuin subscriptej‰ lˆytyy...
			set count = $increment(count) ;Otetaan ylˆs niiden lukum‰‰r‰ count:iin...
			set y = $order(^ZenApp1.App1D(y))
		}
		set ^ZenApp1.App1D = count ;Ja muutetaan ^ZenApp1.App1D arvo subscriptien lukum‰‰r‰n mukaiseksi.
		write killCount _ " objektia poistettiin tietokannasta! Tietokannassa j‰ljell‰ " _ count _ " objektia!"
		quit $$$OK
	}
	else {quit $$$ERROR()}
}

}
